 var https = require('https');
 var AWS = require('aws-sdk');
  exports.handler =  async (event, context, callback) => {
      let response = {};
      let finalresp = {};
      let body = {};
      var params = {
                    host: "quote.coins.ph",
                    path: "/v2/markets/BTC-PHP"
                    };
    if (event.httpMethod == 'POST') {
        body = JSON.parse(event.body);
    
    // The output from a Lambda proxy integration must be 
    // in the following JSON object. The 'headers' property 
    // is for custom response headers in addition to standard 
    // ones. The 'body' property  must be a JSON string. For 
    // base64-encoded payload, you must also set the 'isBase64Encoded'
    // property to 'true'.
    response = {
        "isBase64Encoded": false,
        "statusCode": 200,
        "headers": {"content-Type": "application/json"},
        "body": JSON.stringify(body)
    };
    await getRequest(params,body).then(data =>{
        console.log(data);
    }).catch((err) => {
        console.log(err);
    })
    callback(null, response);
};

 };
 
 function getRequest(params,body) {
    var req = https.get(params, function(res) {
    let data = '';
    // console.log('STATUS: ' + res.statusCode);
    res.setEncoding('utf8');
    res.on('data', function(chunk) {
        data += chunk;
    });
    res.on('end', async function() {
        await display(JSON.parse(data), body.invested_price, body.bought_price, body.desired_profit, body.token).then(data =>{
        console.log(data);
    }).catch((err) => {
        console.log(err);
    });
    });
  }).promise();
}
 
 function display(result, invested_price, bought_price, desired_profit, token) {
     
    var currentBTC = invested_price/bought_price;
    var sell_price = Number(result.bid);
    var coins_php_val = Number(result.bid) * currentBTC;
    var profit = (Number(result.bid) * currentBTC) - invested_price;
    var computed = {
        "sell_price":sell_price,
        "profit": profit,
        "desired_profit":desired_profit,
        "token": token,
        "coins_php_val":coins_php_val,
        "result": result
    }
    
 }
  
  async function awsSNSfunctions(params) {
  var formatter = new Intl.NumberFormat('en-US', {
  style: 'currency',
  currency: 'PHP'
});

if (params.profit > params.desired_profit){
// if (true) {
    console.log("-------------------PUBLISHING TO THE DEVICE----------------");
    
//CHANGE ARN to the right target
const new_sns = new AWS.SNS({apiVersion:'2010-03-31'});
var TargetArn;
const PlatformApplicationArn = 'arn:aws:sns:us-east-1:773314055569:app/GCM/CoinsNotifSNS';
var listedEndpoints;
var createEndpoints;
const listparams = {
  PlatformApplicationArn: PlatformApplicationArn
};

listedEndpoints = await new_sns.listEndpointsByPlatformApplication(listparams, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     {
      return data.Endpoints;
  }
}).promise();
        console.log(listedEndpoints.Endpoints);
      listedEndpoints.Endpoints.forEach(function (item) {
 if (item.Attributes.Token == params.token) {
     TargetArn = item.EndpointArn;
 }
});
console.log("------------Target ARN from list: " + TargetArn)

if (!TargetArn) {
  var paramscreate = {
 PlatformApplicationArn: PlatformApplicationArn,
  Token: params.token
};
createEndpoints = await new_sns.createPlatformEndpoint(paramscreate,  function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else    {
    //   console.log("------------from CreatePlatformEndpoint---------------");
    //   console.log(data);
      return data.EndpointArn;
  }         // successful response
}).promise();
console.log(createEndpoints);
TargetArn = createEndpoints.EndpointArn;
console.log("------------Target ARN from create: " + TargetArn);
}

    let payload = {
        default: 'default',
        GCM : {
            notification: {
                body: " Selling Price: " + formatter.format(params.sell_price) + 
                "\n Total Price of your BTC on Coins: " + formatter.format(params.coins_php_val) +
                "\n Total Profit: " + formatter.format(params.profit) ,
                title: params.result.symbol,  
                sound: "default"
            }
        }
        
    }
    
    payload.GCM = JSON.stringify(payload.GCM);
    payload = JSON.stringify(payload);
    const params_sns = {
        Message: payload,
        TargetArn: TargetArn,
        MessageStructure: 'json'
    }
    console.log("------------------------FINAL MESSAGE---------------------");
    console.log(params_sns);
    


    await new_sns.publish(params_sns).promise();
};
      
  }